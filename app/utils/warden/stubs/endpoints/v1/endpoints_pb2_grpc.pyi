"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from abc import (
    ABCMeta,
    abstractmethod,
)

from grpc import (
    Channel,
    Server,
    ServicerContext,
    UnaryStreamMultiCallable,
    UnaryUnaryMultiCallable,
)

from typing import (
    Iterator,
)

from ozbalance.warden.stubs.warden.endpoints.v1.endpoints_pb2 import (
    GetEndpointsRequest,
    GetEndpointsResponse,
    GetMSSQLEndpointsRequest,
    GetMSSQLEndpointsResponse,
    WatchEndpointsRequest,
    WatchEndpointsResponse,
    WatchMSSQLEndpointsRequest,
    WatchMSSQLEndpointsResponse,
)


class EndpointsServiceStub:
    def __init__(self, channel: Channel) -> None: ...
    GetEndpoints: UnaryUnaryMultiCallable[
        GetEndpointsRequest,
        GetEndpointsResponse]
    """GetEndpoints once returns Endpoints for the service."""

    WatchEndpoints: UnaryStreamMultiCallable[
        WatchEndpointsRequest,
        WatchEndpointsResponse]
    """WatchEndpoints creates subscription for service's endpoints.
    Service send updates immediately after getting notifications from k8s.
    """

    GetMSSQLEndpoints: UnaryUnaryMultiCallable[
        GetMSSQLEndpointsRequest,
        GetMSSQLEndpointsResponse]
    """GetMSSQLEndpoints once returns MSSql Endpoints for the cluster."""

    WatchMSSQLEndpoints: UnaryStreamMultiCallable[
        WatchMSSQLEndpointsRequest,
        WatchMSSQLEndpointsResponse]
    """WatchMSSQLEndpoints creates subscription for MSSql endpoints."""


class EndpointsServiceServicer(metaclass=ABCMeta):
    @abstractmethod
    def GetEndpoints(self,
        request: GetEndpointsRequest,
        context: ServicerContext,
    ) -> GetEndpointsResponse:
        """GetEndpoints once returns Endpoints for the service."""
        pass

    @abstractmethod
    def WatchEndpoints(self,
        request: WatchEndpointsRequest,
        context: ServicerContext,
    ) -> Iterator[WatchEndpointsResponse]:
        """WatchEndpoints creates subscription for service's endpoints.
        Service send updates immediately after getting notifications from k8s.
        """
        pass

    @abstractmethod
    def GetMSSQLEndpoints(self,
        request: GetMSSQLEndpointsRequest,
        context: ServicerContext,
    ) -> GetMSSQLEndpointsResponse:
        """GetMSSQLEndpoints once returns MSSql Endpoints for the cluster."""
        pass

    @abstractmethod
    def WatchMSSQLEndpoints(self,
        request: WatchMSSQLEndpointsRequest,
        context: ServicerContext,
    ) -> Iterator[WatchMSSQLEndpointsResponse]:
        """WatchMSSQLEndpoints creates subscription for MSSql endpoints."""
        pass


def add_EndpointsServiceServicer_to_server(servicer: EndpointsServiceServicer, server: Server) -> None: ...
