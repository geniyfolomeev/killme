"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from abc import (
    ABCMeta,
    abstractmethod,
)

from grpc import (
    Channel,
    Server,
    ServicerContext,
    UnaryStreamMultiCallable,
    UnaryUnaryMultiCallable,
)

from ozbalance.warden.stubs.warden.endpoints.v2.endpoints_pb2 import (
    ApplicationRequest,
    ApplicationResponse,
    ResourceEtcdRequest,
    ResourceEtcdResponse,
    ResourceKafkaRequest,
    ResourceKafkaResponse,
    ResourceMSSQLRequest,
    ResourceMSSQLResponse,
    ResourcePostgresRequest,
    ResourcePostgresResponse,
    ResourcePostgresShardedRequest,
    ResourcePostgresShardedRequestV2,
    ResourcePostgresShardedResponse,
    ResourcePostgresShardedResponseV2,
    ResourceRedisShardedRequest,
    ResourceRedisShardedResponse,
)

from typing import (
    Iterator,
)


class DiscoveryServiceStub:
    def __init__(self, channel: Channel) -> None: ...
    Application: UnaryStreamMultiCallable[
        ApplicationRequest,
        ApplicationResponse]

    ResourcePostgres: UnaryStreamMultiCallable[
        ResourcePostgresRequest,
        ResourcePostgresResponse]

    ResourceMSSQL: UnaryStreamMultiCallable[
        ResourceMSSQLRequest,
        ResourceMSSQLResponse]

    ResourcePostgresSharded: UnaryStreamMultiCallable[
        ResourcePostgresShardedRequest,
        ResourcePostgresShardedResponse]

    ResourcePostgresShardedV2: UnaryStreamMultiCallable[
        ResourcePostgresShardedRequestV2,
        ResourcePostgresShardedResponseV2]

    ResourceRedisSharded: UnaryStreamMultiCallable[
        ResourceRedisShardedRequest,
        ResourceRedisShardedResponse]

    ResourceKafka: UnaryUnaryMultiCallable[
        ResourceKafkaRequest,
        ResourceKafkaResponse]

    ResourceEtcd: UnaryUnaryMultiCallable[
        ResourceEtcdRequest,
        ResourceEtcdResponse]


class DiscoveryServiceServicer(metaclass=ABCMeta):
    @abstractmethod
    def Application(self,
        request: ApplicationRequest,
        context: ServicerContext,
    ) -> Iterator[ApplicationResponse]: ...

    @abstractmethod
    def ResourcePostgres(self,
        request: ResourcePostgresRequest,
        context: ServicerContext,
    ) -> Iterator[ResourcePostgresResponse]: ...

    @abstractmethod
    def ResourceMSSQL(self,
        request: ResourceMSSQLRequest,
        context: ServicerContext,
    ) -> Iterator[ResourceMSSQLResponse]: ...

    @abstractmethod
    def ResourcePostgresSharded(self,
        request: ResourcePostgresShardedRequest,
        context: ServicerContext,
    ) -> Iterator[ResourcePostgresShardedResponse]: ...

    @abstractmethod
    def ResourcePostgresShardedV2(self,
        request: ResourcePostgresShardedRequestV2,
        context: ServicerContext,
    ) -> Iterator[ResourcePostgresShardedResponseV2]: ...

    @abstractmethod
    def ResourceRedisSharded(self,
        request: ResourceRedisShardedRequest,
        context: ServicerContext,
    ) -> Iterator[ResourceRedisShardedResponse]: ...

    @abstractmethod
    def ResourceKafka(self,
        request: ResourceKafkaRequest,
        context: ServicerContext,
    ) -> ResourceKafkaResponse: ...

    @abstractmethod
    def ResourceEtcd(self,
        request: ResourceEtcdRequest,
        context: ServicerContext,
    ) -> ResourceEtcdResponse: ...


def add_DiscoveryServiceServicer_to_server(servicer: DiscoveryServiceServicer, server: Server) -> None: ...
